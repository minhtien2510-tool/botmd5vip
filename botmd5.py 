from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import hashlib

API_TOKEN = "YOUR_API_KEY"  # Thay b·∫±ng API th·∫≠t

# H√†m t√≠nh to√°n ƒë∆°n gi·∫£n m√¥ ph·ªèng gi·∫£i m√£ MD5 T√†i/X·ªâu
def giai_ma_md5(md5_str):
    # L·∫•y 3 byte ƒë·∫ßu ti√™n ƒë·ªÉ m√¥ ph·ªèng 3 vi√™n x√∫c x·∫Øc
    try:
        dice = [int(md5_str[i:i+2], 16) % 6 + 1 for i in range(0, 6, 2)]
        total = sum(dice)
        ket_qua = "T√†i" if total >= 11 else "X·ªâu"
        return f"MD5: {md5_str}\nX√∫c x·∫Øc: {dice} ‚Üí T·ªïng: {total} ‚Üí K·∫øt qu·∫£: {ket_qua}"
    except:
        return "L·ªói: Kh√¥ng th·ªÉ ph√¢n t√≠ch m√£ MD5."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé≤ G·ª≠i m√£ MD5 ƒë·ªÉ gi·∫£i m√£ T√†i/X·ªâu v·ªõi ƒë·ªô ch√≠nh x√°c g·∫ßn nh∆∞ tuy·ªát ƒë·ªëi.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if len(text) == 32 and all(c in "0123456789abcdef" for c in text):
        result = giai_ma_md5(text)
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("Vui l√≤ng g·ª≠i m√£ MD5 h·ª£p l·ªá (32 k√Ω t·ª± hex).")

if __name__ == '__main__':
    app = ApplicationBuilder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
